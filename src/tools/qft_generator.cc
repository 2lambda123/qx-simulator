#include <iostream>
#include <cstring>

#define println(x) std::cout << x << std::endl


/**
 * qft circuit generator
 */
int main(int argc, char **argv)
{
   if (argc != 2)
   {
      println("[x] missing parameter : specify the number of qubits !");
      println(" usage : ./qft_generator n \n 'n' is the number of qubits.");
      return -1;
   }
   println("#");
   println("#  =================================================================================================== "); 
   println("#        _______                                                                                       ");
   println("#       /  ___   \\   _  __      ____   ____   __  ___  __  __   __    ___  ______  ____    ___         ");
   println("#      /  /   /  |  | |/_/     / __/  /  _/  /  |/  / / / / /  / /   / _ |/_  __/ / __ \\  / _ \\        ");
   println("#     /  /___/  /  _>  <      _\\ \\   _/ /   / /|_/ / / /_/ /  / /__ / __ | / /   / /_/ / / , _/        ");
   println("#     \\______/\\__\\ /_/|_|    /___/  /___/  /_/  /_/  \\____/  /____//_/ |_|/_/    \\____/ /_/|_|         ");
   println("#                                                                                                      ");
   println("#     version 0.1 beta - QuTech - 2016 - report bugs and suggestions to: nader.khammassi@gmail.com     ");
   println("#  =================================================================================================== ");
   println("#");

   uint32_t n = atoi(argv[1]);
   uint32_t hg = 0;  // number of hadamard gates
   uint32_t rg = 0;  // number of rotation gates
   uint32_t swpg = 0; // number of swap gates

   if (n>50)
   {
      println("[x] too much qubits : " << n);
      return -1;
   }
   // header
   println("# This QFT circuit is automatically generated by 'qft_generator'");
   println("# Author: Nader Khammassi");
   println("# Bugs can be reported to <nader.khammassi@gmail.com>");
   println("");
   // generate the circuit
   println("qubits " << n);
   println("");
   println("# init qubits to |0...01> (set your own input state here)");
   println(".init");
   println("   x q0");
   println("");
   println("# main circuit");
   println(".qft");
   for (uint32_t i=0; i<n-1; ++i)
   {
      println("   h q" << i); hg++;
      for (uint32_t j=i+1; j<n; ++j)
      {
	 println("   cr q" << j << ",q" << i); 
	 rg++;
      }
   }
   println("   h q" << (n-1)); hg++;
   
   println("\n# reverse qubit order");
   println(".reverse");
   // reorder
   for (uint32_t i=0; i<n/2; ++i)
   {
      println("   swap q" << i << ",q" << (n-i-1));
      swpg++;
   }
   
   println("\n# measure qubits");
   println(".measure");
   for (uint32_t i=0; i<n; ++i)
      println("   measure q" << i);

   println("\n   display_binary");

   println(""); 
   println("# statistics: ");
   println("#  total number of gates: " << (hg+rg+swpg*3));
   println("#    |- number of H    gates: " << (hg));
   println("#    |- number of Rk   gates: " << (rg));
   println("#    |- number of swap gates: " << (swpg) << "(" << (swpg*3) << " cnot gates)");
   println(""); 

   return 0;
}
