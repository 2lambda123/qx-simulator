/**
 * @file
 * @author	Nader KHAMMASSI - nader.khammassi@gmail.com 
 * @date		1-03-13
 * @copyright  
 *
 * XPU - C++ Parallel  Programming Library for Multicore Architectures
 *
 * Copyright (C) 2011-2014 Nader Khammassi, All Rights Reserved.
 *
 * This file is part of XPU and has been downloaded from 
 * http://www.xpu-project.net/.
 *
 * XPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * version 2 of the Liscence, or any later version.
 *
 * XPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * @brief 
 *    xpu runtime	
 */


// #include "config.h"
#include <xpu.h>

//internal components
//#include <xpu/core/os/thread.h>
#include <xpu/core/generic_worker.h>

namespace  xpu 
{
   namespace core
   {
	 //class generic_worker;
	 //class worker_queue;

	 bool                   initialized   = false;
	 
	 u_int32_t              workers_count = 0;
	 u_int32_t              lasy_workers_count;
      
	 xpu::core::generic_worker ** workers;
      xpu::core::generic_worker ** lasy_workers;
	 xpu::core::work_queue        dynamic_work_queue;

	 namespace system  // hardware information
	 {
	    namespace processor  // processing units information
	    {
		  u_int32_t logical_processor_count;
		  u_int32_t graphic_processor_count;
		  u_int32_t l1_data_cache_line_size;
		  u_int32_t l1_inst_cache_line_size;
		  u_int32_t l1_data_cache_size;
		  u_int32_t l1_inst_cache_size;
		  // processor cache hierarchy : see "unified multicore model" paper
	    }

	    u_int32_t explore(); // extract information : dynamic hardware exloration
	 } // system
   } // core
} // xpu

#ifdef inlined_section
u_int32_t xpu::core::system::explore()
{
   //xpu::core::system::processor::logical_processor_count = 8;
   //xpu::core::system::processor::graphic_processor_count = 0;
   #if defined(_AIX) || defined(_CRAY) || defined(__irix) || defined(__linux) || defined(__osf__) || defined(__sun)
	 #if defined(__sun) || defined(__linux) || defined(__osf__) || defined(_AIX)
	 xpu::core::system::processor::logical_processor_count       = sysconf(_SC_NPROCESSORS_ONLN);
	 #endif // linux
	 #if defined(_CRAY)
	 xpu::core::system::processor::logical_processor_count       = sysconf(_SC_CRAY_NCPU);        // total number of cpus
	 #endif // cray
	 #if defined(__irix)
	 xpu::core::system::processor::logical_processor_count       = sysconf(_SC_NPROC_ONLN);       // number of active/running cpus 
	 #endif // irix
	 #if defined(__hpux)
	 xpu::core::system::processor::logical_processor_count       = mpctl(MPC_GETNUMSPUS, 0, 0);   // total number of cpus 
	 xpu::core::system::processor::l1_data_cache_line_size       = 64;
	 xpu::core::system::processor::l1_data_cache_size            = 32768;
	 xpu::core::system::processor::l1_inst_cache_line_size       = 32;
	 xpu::core::system::processor::l1_inst_cache_size            = 32768;
	 #endif /* hpux */
	 xpu::core::system::processor::l1_data_cache_line_size        = sysconf(_SC_LEVEL1_DCACHE_LINESIZE);  
	 xpu::core::system::processor::l1_data_cache_size             = sysconf(_SC_LEVEL1_DCACHE_SIZE);      // _SC_LEVEL1_DCACHE_SIZE not in POSIX.x standard ?
	 xpu::core::system::processor::l1_inst_cache_line_size        = sysconf(_SC_LEVEL1_ICACHE_LINESIZE);  // _SC_LEVEL1_ICACHE_LINESIZE not in POSIX.x standard ?
	 xpu::core::system::processor::l1_inst_cache_size             = sysconf(_SC_LEVEL1_ICACHE_SIZE);      // _SC_LEVEL1_ICACHE_SIZE not in POSIX.x standard ?
   #elif defined(__APPLE__)
	 xpu::core::system::processor::logical_processor_count        = MPProcessorsScheduled();              // number of active/running cpus 
	 xpu::core::system::processor::l1_data_cache_line_size        = 64;
	 xpu::core::system::processor::l1_data_cache_size             = 32768;
	 xpu::core::system::processor::l1_inst_cache_line_size        = 32;
	 xpu::core::system::processor::l1_inst_cache_size             = 32768;
   #else
	 xpu::core::system::processor::logical_processor_count        = 2;
	 xpu::core::system::processor::l1_data_cache_line_size        = 64;
	 xpu::core::system::processor::l1_data_cache_size             = 32768;
	 xpu::core::system::processor::l1_inst_cache_line_size        = 32;
	 xpu::core::system::processor::l1_inst_cache_size             = 32768;
   #endif

   return xpu::core::system::processor::logical_processor_count;
}

/**
 *
 */
u_int32_t xpu::init()
{
   if (xpu::core::initialized)
	 return 0;
   // exlore hardware architecture and capabilities
   xpu::core::system::explore();

   xpu::core::workers_count      = xpu::system::processor::logical_processors_count * 2;
   xpu::core::lasy_workers_count = xpu::system::processor::logical_processors_count;
   xpu::core::workers      = new generic_worker * [core::workers_count];
   xpu::core::lasy_workers = new generic_worker * [core::lasy_workers_count];

   printf("[+] initializing xpu...\n");

   for (int i=0; i<core::workers_count; i++)
   {
	 core::workers[i] = new generic_worker(i%system::processor::logical_processors_count,new work_queue());
	 core::workers[i]->start();
   }

   for (int i=0; i<core::lasy_workers_count; i++)
   {
	 core::lasy_workers[i] = new generic_worker(i%system::processor::logical_processors_count, &core::dynamic_work_queue);
	 core::lasy_workers[i]->start();
   }

   xpu::core::initialized = true;
   
   printf("[+] initialized.\n");
   
   return 0;
}

/**
 *
 */
u_int32_t xpu::init(u_int32_t processor_count)
{
   if (xpu::core::initialized)
	 return 0;
   // exlore hardware architecture and capabilities
   xpu::core::system::explore();

   // set workers count
   xpu::core::workers_count      = processors_count * 2;

   xpu::core::workers_count      = xpu::system::processor::logical_processors_count * 2;
   xpu::core::lasy_workers_count = xpu::system::processor::logical_processors_count;
   xpu::core::workers      = new generic_worker * [core::workers_count];
   xpu::core::lasy_workers = new generic_worker * [core::lasy_workers_count];

   printf("[+] initializing xpu...\n");

   for (int i=0; i<core::workers_count; i++)
   {
	 core::workers[i] = new generic_worker(i%system::processor::logical_processors_count,new work_queue());
	 core::workers[i]->start();
   }

   for (int i=0; i<core::lasy_workers_count; i++)
   {
	 core::lasy_workers[i] = new generic_worker(i%system::processor::logical_processors_count, &core::dynamic_work_queue);
	 core::lasy_workers[i]->start();
   }

   xpu::core::initialized = true;
   
   printf("[+] initialized.\n");
   
   return 0;
}

/**
 * stop runtime
 */
u_int32_t xpu::clean()
{
   // stop tam and cleanup memory
   //__debug("stopping workers...");
   for (u_int32_t i=0; i<xpu::core::workers_count; i++)
   {
	 xpu::core::workers[i]->stop();
	 try {xpu::core::workers[i]->join(); }
	 catch(...) { continue; } 
   }

   for (u_int32_t i=0; i<xpu::core::workers_count; i++)
   {
	 xpu::core::lazy_workers[i]->stop();
	 try {xpu::core::lazy_workers[i]->join(); }
	 catch(...) { continue; } 
   }
   //__debug("cleanup memory...");
   for (u_int32_t i=0; i<xpu::core::workers_count; i++)
   {
	 delete xpu::core::workers[i];
	 delete xpu::core::lazy_workers[i];
   }
   //__debug("cleanup done.");
   return 0;
}

#endif // 0
